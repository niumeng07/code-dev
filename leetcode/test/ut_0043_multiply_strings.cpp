#include <time.h>

#include <iostream>

#include "0043_multiply_strings/multiply_strings.h"
#include "gtest/gtest.h"
using namespace std;

TEST(multiply_strings, test0) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}

TEST(multiply_strings, test1) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}

TEST(multiply_strings, test2) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test3) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test4) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test5) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test6) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test7) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test8) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}
TEST(multiply_strings, test9) {
    MultiplyStrings().multiply(
            "2561174895113770831485936855339505614003634104187547032827672522"
            "21661609163404299",
            "6120049611164370908121855090219821148001237884007019114745968861"
            "1759881218205422431757614");
}

TEST(multiply_strings, test10) {
    EXPECT_EQ(MultiplyStrings().multiply("123", "456"), "56088");
}

int main(int argc, char **argv) {
    
    clock_t a = clock();
    testing::InitGoogleTest(&argc, argv);
    cout << RUN_ALL_TESTS() << endl;
    clock_t b = clock();
    cout << b - a << " ns" << endl;
    return 0;
}
