# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
       
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

Subscribe to see which companies asked this question.

解决方案
程序并非传统的两个iter一快一慢相互追赶，（相互追赶时间复杂度很高）
采用一个set，每一个ListNode把其地址放到set里，取iter.next，先从set里查找，找到说明出现过，即Cycle了，找不到则更新到set里
