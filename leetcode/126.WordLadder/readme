Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note:
Return an empty list if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
UPDATE (2017/1/20):
The wordList parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.

Subscribe to see which companies asked this question.

典型的图算法？

beginWord为Node-C[0]
循环
从wordlist中找与Node-C[k]差异为1的词做为Node-C[k]的子Node, 并计为Node-C[k+1]
    若Node-C[k+1]层中有endWord, 则返回所有从beginWord到endWord的路径, 结束
    若Node-C[k+1]层中无endWord, 则继续循环

最后的说明
两个版本
1. 
