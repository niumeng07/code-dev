Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the empty string "".

If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.

方法1.
重要的是要求复杂度O(n)
遍历一次，找到以s中第i个字符开始的最小window
一定是从一个属于t的字符串开始
--怎样找当前字符的最小window
方法2.
动态规划
if( s[0] == t[0] ) return min{ 1 + f(s[1:], t[1:]), f(s[1:], t) }
else return f(s[1:], t)
停止条件: t.size() == 0
